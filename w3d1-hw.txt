HTTPUrlConnection: A URLConnection with support for HTTP. You can perform network operations. Given a URL, you can open an internet connection. You usually use an InputStream to get the input from the network connection. You must include two user permissions in your manifest for it to work. Supports TLS, streaming uploads and downloads, configurable timeouts, IPv6 and connection pooling.

Making an Android Library: Instead of using an APK, you use an AAR to use the depedency for the Android app module. They contain Android resources and a manifest file, so you can bundle shared resources in addition to Java. They are useful for when you're building multiple apps that use some of the same components such as activities, services or UI layouts and when you're building an app that exists in multiple APK variations and need the same core components in both. In order to create one you go to File -> New -> New Module, in the Create New Module Window, click Android Library and then Next. Give the library a name. You can turn an app into a library by changing the build.gradle file from com.android.application to com.android.library, then click Sync Project with Gradle Files. Finally, in order to add a library as a dependency go to File -> New Module, Import .JAR/.AAR Package, then click Next. Enter the location of the AAR and then click Finish. Or go to File -> New -> Import Module.

What is FireBase and which are services provided by it: It's cloud storage that lets you upload and share user generated content such as images and video which allows you to build rich media content into your apps. It's stored in a Google Cloud Storage bucket, cloud storage lets you securely upload these files directly from mobile devices and web browsers handling spotty networks with ease. Provides a realtime database and backend service, the data is synchornized across clients and stored in the cloud. It also provides analytics which is a free app measurement solution that provides insight on app usage and user engagement. Additionally provides push and regular notification services.

OKHTTPClient: It's an open source project designed to be an efficient HTTP client. It supports SPDY protocol and SDPY is the basis for HTTP 2.0 and allows multiple HTTP requests to be multiplexed over one socket connection. You can add a depedency to group ID com.squareup.okhttp, artifactId, okhttp and the current version. 

Retrofit2: It's a REST cflient for Android and Java by Square. It makes it relatively easy to retrieve and upload JSON via a REST based webservice. You can configure which converter is used for data serialization. Typically for JSON you use GSon, but can add custom converters to process XML or other protocols. Retrofit uses OKHTTP library for HTTP requests. Set Retrofit as a dependency for your project by using the build.gradle file.  compile 'com.squareup.retrofit2:retrofit:2.3.0' (newest version)

Volley: An HTTP library that makes networking for Android apps easier and most importantly, faster, it's available on GitHub. Some of the benefits include automatic scheduling of network requests, multiple concurrent network connectoins, transparent disk and memory response caching with standard HTTP cache coherence, support for request prioritization, cancellation request API, ease of customization, strong ordering that makes it easy to correctly populate your UI with data fetched asynchronously from the network and debugging and tracing tools. It excels at RPC-type operations used to populate a UI, such as fetching a page of search results. It's not suitable from large downloads or streaming operations. You add it to dependencies: compile 'com.android.volley:volley:1.0.0' (newest version)

Converters: Use the com.google.gson.Gsono class, create a new instance of this class and use the method fromJson class passing in classOfT which is the java object (POJO) the json is being converted to. Another way is to use the com.google.gson.GsonBuilder class. The class allows setting up certain features such as allowing null serialization or setting up custom serializing policies. Create a GsonBuilder, apply the features and then obtain the Gson class from the builder.  
